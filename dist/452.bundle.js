(self.webpackChunkreact_scaffold=self.webpackChunkreact_scaffold||[]).push([[452],{452:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var a,o=r(837),s=r(763),i=r(52);e=r.hmd(e),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(e);var n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},l=r(696),c=r(166),f=function(){return(0,s.useEffect)(n((function(){console.log(l),console.log(c);var e=document.getElementById("GL_PointColors");if(null!==e){var t=(0,i.ZP)(e,null);if(null!==t){console.log(t);var r=(0,i.Re)(t,l.sourceCode,c.sourceCode);t.useProgram(r);var a=t.getAttribLocation(r,"a_position"),o=t.createBuffer();t.enableVertexAttribArray(a),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,new Float32Array([.5,-.5,-.5,-.5,0,0,-.5,.5,.5,.5]),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,o),t.vertexAttribPointer(a,2,t.FLOAT,!1,2*Float32Array.BYTES_PER_ELEMENT,0),t.drawArrays(t.POINTS,0,5)}else console.log("gl error")}else console.log("canvas error")}),"useProgram{}")),s.createElement("canvas",{id:"GL_PointColors",width:"500",height:"500"})};n(f,"useEffect{}");var d=(0,o.w)(f);const u=d;var g,m;(g="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(g.register(f,"GLPointColors","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/components/glsl/GLPointColor.tsx"),g.register(d,"default","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/components/glsl/GLPointColor.tsx")),(m="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&m(e)},52:(e,t,r)=>{"use strict";var a;r.d(t,{ZP:()=>u,Re:()=>i}),e=r.hmd(e),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(e);var o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e};function s(e,t){for(var r=["webgl","experimental-webgl","webkit-3d","moz-webgl"],a=0;a<r.length;++a)try{var o=e.getContext(r[a],t);if(null!==o&&o instanceof WebGLRenderingContext)return o}catch(e){console.log(e);continue}return null}function i(e,t,r){var a=l(e,e.VERTEX_SHADER,t);if("string"==typeof a)return a;var o=l(e,e.FRAGMENT_SHADER,r);return"string"==typeof o?o:n(e,a,o)}function n(e,t,r){var a=e.createProgram();if(null===a)return"创建 program 对象失败！";if(e.attachShader(a,t),e.attachShader(a,r),e.linkProgram(a),e.getProgramParameter(a,e.LINK_STATUS))return a;var o=e.getProgramInfoLog(a);return null===o?"":(e.deleteProgram(a),o)}function l(e,t,r){var a=e.createShader(t);if(null===a)return"创建 shader 对象失败！";if(e.shaderSource(a,r),e.compileShader(a),e.getShaderParameter(a,e.COMPILE_STATUS))return a;var o=e.getShaderInfoLog(a);return e.deleteShader(a),null===o?"":o}function c(e,t,r){var a=f(t),o=f(r);return Promise.all([a,o])}function f(e){return new Promise((function(t,r){var a=new XMLHttpRequest;a.onreadystatechange=function(){4===a.readyState&&(200===a.status?t(a.responseText):r(a.status))},a.open("GET",e,!0),a.send()}))}var d=s;const u=d;function g(e){return new Promise((function(t,r){var a=new Image;a.onload=function(){t(a)},a.onerror=function(){r(a)},a.onabort=function(){r(a)},a.src=e}))}var m,b;(m="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(m.register(s,"getWebGLContext","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register((function(e,t){for(var r=["webgl2"],a=0;a<r.length;++a)try{var o=e.getContext(r[a],t);if(null===o||Object.is(o,WebGL2RenderingContext))return o}catch(e){continue}return null}),"getWebGL2Context","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(i,"getWebGLProgram","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(n,"createProgram","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(l,"createShader","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register((function(e,t,r){return new Promise((function(a,s){c(0,t,r).then(o((function(t){var r=t[0],o=t[1],s=i(e,r,o);e.useProgram(s),a(s)}),"useProgram{}")).catch((function(e){s(e)})).finally((function(){console.log("vsFile:".concat(t,"，fsFile:").concat(r,"加载完成"))}))}))}),"getWebGLProgramFromShadersFile","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(c,"loadShaders","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(f,"loadShaderFromFile","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register((function(e){var t=[];return e.forEach((function(e){t.push(g(e))})),Promise.all(t)}),"loadImages","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(g,"loadImage","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts"),m.register(d,"default","/Users/matias/matias_github/scaffold/react-scaffold/src/WebGL/utils/ts/shaderUtils.ts")),(b="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&b(e)},166:e=>{e.exports={sourceCode:"precision mediump float;void main(){float A=distance(gl_PointCoord,vec2(0.5,0.5));if(A<0.5){gl_FragColor=vec4(1.,0.,0.,1.);}else{discard;}}",uniforms:{},consts:{}}},696:e=>{e.exports={sourceCode:"attribute vec4 a_position;void main(){gl_Position=a_position;gl_PointSize=20.;}",uniforms:{},consts:{}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,